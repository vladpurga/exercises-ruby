---
name: Массивы
theory: |

  Массивы в Ruby работают так же, как и массивы в любых других динамических языках. Отличия в основном в некоторых синтаксических конструкциях и в большом количестве встроенных методов. Основные операции:

  ```ruby
  items = [1, 2]

  # Добавление в конец
  items << 3 # [1, 2, 3]
  # Добавление в начало
  items.unshift 5 # [5, 1, 2, 3]

  items.first # 5
  # Последний элемент
  items.last # 3

  items.length # 4
  # не пустой?
  items.any? # true
  # пустой?
  items.empty? # false

  # входит ли value в items
  items.include? value

  # Обращение к несуществующему элементу возвращает nil
  items[5] # nil

  items.sum # 11
  ```

  Массивы в Ruby передаются по ссылке, как в Python и JavaScript. Но в отличие от JavaScript сравнение массивов идёт по значениям:

  ```ruby
  items = [1, 2]
  items == [1, 2] # true
  ```

  Для обхода массивов в Ruby используется метод `each()`. По принципу работы он похож на `times()`, но применяется к коллекциям. `each()` принимает блок, который вызывается для каждого элемента коллекции. Внутрь блока передаётся текущий элемент.

  ```ruby
  # Сбор в строчку
  items = [1, 2, 3]
  result = ''
  items.each do |item|
    result = "#{result}#{item}"
  end
  puts result # => '123'
  ```


instructions: |

  Напишите функцию `intersection()`, которая находит пересечение двух массивов. Под пересечением понимается новый массив, который состоит из элементов, входящих одновременно в оба исходных массива:

  ```ruby
  intersection([1, 3, 8], [9, 3, 1]); # [3, 1]
  intersection([8], [5, 0]) # []
  ```

tips:
  - |
    [Методы массивов](https://ruby-doc.org/core-3.0.0/Enumerator.html)
